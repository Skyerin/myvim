--------------------------------------------------------------------------------------------------------------------
 PHP
--------------------------------------------------------------------------------------------------------------------
If you have a file, which contains some data (lets say an array) which you want to have access to every now and then;

Create the file. Make the data. Put a return at the end of it on that data.

In the code where you need to use that data, put in a require/include statement and assign to a variable.
E.G. $map = require "/path/to/the/file/which/we/are/looking/for.php";

And voila, you now have access to that data anywhere you need it.
This would probably be used for something like a config file with an associative array.


--------------------------------------------------------------------------------------------------------------------
 GIT
--------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------
 BRANCHES
----------------------------------------------------------
### Create a new branch. When we work on a new feature, we create a branch for it. We develop it on the branch.
git branch branch_name_go_here

### Checkout a remote branch into a local one. Make sure you do a git pull first before you do this.
git checkout -b new_branch_name_goes_here
git pull origin remote_branch_name_goes_here

### Merge branch back into master. For this to work, make sure the branch you're on is master.
### MERGES ARE ONLY SUPPOSED TO HAPPEN AS A VERY LAST STEP!
git merge branch_name_to_merge_go_here

### Find in files in Git
git grep "your_search_goes_here"


----------------------------------------------------------
 SmartGit
----------------------------------------------------------
### Cherrypicking instructions
1) Make the commits on the branch.
2) Switch branch to master
3) branch->cherrypick
4) Click on branches. Make sure only master and the other branch are selected.
5) Click on cherrypick. All should be fine from this point on.

--------------------------------------------------------------------------------------------------------------------
 VIM
--------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------
 CTAGS
----------------------------------------------------------
### Make project tags - The below makes a project wide tags file. Vim is setup to look for this
ctags --file-scope=no -R

### Using tags
ctrl + ] = when you're over a function, this opens it up
ctrl + t = when you've gone into a function, ctrl + t brings you back to where you were

alternatively, inside of using ctrl + ], use the below;

:ts – shows the list.
:tn – goes to the next tag in that list.
:tp - goes to the previous tag in that list.
:tf – goes to the function which is in the first of the list.
:tl – goes to the function which is in the last of the list.

NOTE: If there is only one actual occurrence of the class/variable being searched for, :ts may
      return a really weird result/no result at all. In this instance, you need to use the
      ctrl + ] and it will take you to the declaration.

----------------------------------------------------------
 NERDCommenter
----------------------------------------------------------
### NERDCommenter help
[count]\ci - Toggles the comment state of the selected line(s) individually.
[count]\cy- Same as cc except that the commented line(s) are yanked first.
\c$ - Comments the current line from the cursor to the end of line.
\cA - Adds comment delimiters to the end of line and goes into insert mode between.

----------------------------------------------------------
 MISC
----------------------------------------------------------
### ADD NEW PLUGINS TO VIM VIA GITHUB
git submodule add [repository_name] bundle/[folder_name]
git submodule init
git submodule update

### FIND IN FILES
Press F4 over a word. Runs a vimgrep search
:copen to go into the quickfix list
:cclose to close the quickfix list
